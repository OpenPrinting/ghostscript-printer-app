name: ghostscript-printer-app
base: core20
version: '1.0'
summary: Ghostscript Printer Application
description: |
  The Ghostscript Printer Application is a PAPPL (Printer Application
  Framework) based Printer Application to support printers using
  Ghostscript's built-in printer drivers (and some extra filters).

grade: stable
confinement: strict

# Only build on the architectures supported
architectures:
  - build-on: amd64
  - build-on: arm64
  - build-on: armhf

# Make resolution of ".local" host names (Zero-Conf/mDNS/DNS-SD)
# working: Mirror nsswitch.conf with added mDNS look-up support into
# /etc/nsswitch.conf
# See: https://forum.snapcraft.io/t/how-can-i-lookup-host-name-from-snap-core-using-avahi-mdns/
layout:
  /etc/nsswitch.conf:
    bind-file: $SNAP/etc/nsswitch.conf

apps:
  ghostscript-printer-app-server:
    command: scripts/run-ghostscript-printer-app-server
    daemon: simple
    plugs: [avahi-control, home, network, network-bind, raw-usb]
  ghostscript-printer-app:
    command: scripts/run-ghostscript-printer-app
    plugs: [avahi-control, home, network, network-bind, raw-usb]

parts:
  patches:
    plugin: dump
    source: snap/local/
    organize:
      '*.patch' : patches/
    override-prime: ""

  pappl:
    source: https://github.com/michaelrsweet/pappl
    source-type: git
    plugin: autotools
    override-build: |
      set -eux
      patch -p1 < $SNAPCRAFT_STAGE/patches/pappl-support-text-string-vendor-options.patch
      # Raise the supported number of vendor-specific options/attributes in
      # PAPPL to 256, as the original 32 can be too small for some busy PPD
      # files
      perl -p -i -e 's/(define\s+PAPPL_MAX_VENDOR\s+)32/\1 256/' pappl/printer.h
      # De-activate log-rotating. It does not work with the forked processes
      # of the filters
      perl -p -i -e 's/(system->logmaxsize\s+=).*/\1 0;/' pappl/system.c
      # As we do not use PAPPL's own backends but the CUPS backends using the
      # "cups" device scheme of pappl-retrofit, we let the manual "Network
      # Printer" device on the "Add Printer" page of the web interface use a
      # "cups:socket://..." URI instead of simply "socket://..."
      perl -p -i -e 's/(httpAssembleURI\(.*?)"socket"(.*?\))/\1"cups:socket"\2/' pappl/system-webif.c
      # PAPPL's build system does not insert the LDFLAGS when linking.
      # Patching Makedefs.in to fix this
      perl -p -i -e 's/^(\s*DSOFLAGS\s*=\s*\S*\s+)/\1\$\(LDFLAGS\) /' Makedefs.in
      snapcraftctl build
    autotools-configure-parameters:
      - --prefix=/usr
      - --with-papplstatedir=/var/snap/ghostscript-printer-app/common
      - --with-papplsockdir=/var/snap/ghostscript-printer-app/common/tmp
      - --enable-libjpeg
      - --enable-libpng
      - --enable-libusb
      - --with-dnssd=avahi
    build-packages:
      - libavahi-client-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libpam0g-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - zlib1g-dev
      - perl-base
    stage-packages:
      - libavahi-client3
      - libpng16-16
      - libusb-1.0-0
    prime:
      - -etc/fonts
      - lib/*/lib*.so*
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
      - usr/lib/libpappl.so.1
    after: [patches, cups]

  pappl-retrofit:
    source: https://github.com/openprinting/pappl-retrofit
    source-type: git
    plugin: autotools
    override-build: |
      set -eux
      patch -p1 < $SNAPCRAFT_STAGE/patches/support-new-pappl-string-options.patch
      snapcraftctl build
    autotools-configure-parameters:
      - --prefix=/usr
    build-packages:
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - perl-base
    prime:
      - lib/*/lib*.so*
      - -var
      - -usr/var
      - -usr/bin/test-printer-app
      - -usr/include
      - -usr/lib/*.a
      - -usr/lib/*.la
      - -usr/lib/pkgconfig
      - -usr/lib/test-printer-app
      - -usr/share/
      - -snap
      - usr/lib/libpappl-retrofit.so*
    after: [patches, cups, cups-filters, pappl]

  qpdf:
    source: https://github.com/qpdf/qpdf/releases/download/release-qpdf-10.3.2/qpdf-10.3.2.tar.gz
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    build-packages:
      - g++
      - zlib1g-dev
    stage-packages:
      - libjpeg-turbo8
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -share/man
      - -share/doc
      - -share/lintian
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/lib/libqpdf.a
      - -usr/lib/libqpdf.la
      - -usr/lib/pkgconfig

  ghostscript:
    source: https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs9540/ghostscript-9.54.0.tar.gz
    plugin: autotools
    # As this Printer Application supports Ghostscript's built-in drivers,
    # we build them all.
    autotools-configure-parameters:
      - --prefix=/usr
      - --without-x
      - --disable-gtk
      - --with-drivers=ALL
      - --enable-freetype
      - --without-tesseract
      - --datarootdir=/snap/ghostscript-printer-app/current/usr/share/
    stage-packages:
      - libpaper1
      - libfontconfig1
      - libfreetype6
      - libpng16-16
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    organize:
      snap/ghostscript-printer-app/current/usr/share: usr/share
    after: [cups]

  cups:
    source: https://github.com/OpenPrinting/cups
    source-type: git
    plugin: autotools
    # We only need libcups (with headers, ...), the rastertoepson,
    # rastertohp, and rastertolabel filters (for the PCL-5 PPD files from
    # Ricoh and OEM, and for sample.drv PPDs), the backends,
    # ppdc plus *.defs files (for PPD files provided via *.drv),
    # sample.drv file
    override-build: |
      set -eux
      ./configure --sysconfdir=/var/snap/ghostscript-printer-app/common/
      cd cups
      make
      cd ..
      cd filter
      make rastertoepson
      make rastertohp
      make rastertolabel
      cd ..
      cd backend
      # Have USB quirk files in user-modifiable space for debugging
      perl -p -i -e 's/"CUPS_DATADIR"/"USB_QUIRK_DIR"/' usb-libusb.c
      make snmp dnssd socket ipp ipps lpd usb
      cd ..
      cd ppdc
      make ppdc
      cd ..
      mkdir -p $SNAPCRAFT_STAGE/usr/lib
      cp cups/libcups*.a $SNAPCRAFT_STAGE/usr/lib/
      cp cups/libcups*.so* $SNAPCRAFT_STAGE/usr/lib/
      mkdir -p $SNAPCRAFT_STAGE/usr/include/cups
      cp cups/*.h $SNAPCRAFT_STAGE/usr/include/cups/
      mkdir -p $SNAPCRAFT_STAGE/usr/bin
      cp cups-config $SNAPCRAFT_STAGE/usr/bin/
      mkdir -p $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/filter
      cp filter/rastertoepson $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/filter
      cp filter/rastertohp $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/filter
      cp filter/rastertolabel $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/filter
      mkdir -p $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/backend/
      ( cd backend; \
        cp snmp dnssd socket ipp ipps lpd usb org.cups.usb-quirks $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/backend/ \
      )
      cp conf/snmp.conf $SNAPCRAFT_STAGE/usr/lib/ghostscript-printer-app/backend/
      cp ppdc/ppdc $SNAPCRAFT_STAGE/usr/bin/
      mkdir -p $SNAPCRAFT_STAGE/usr/share/cups/ppdc/
      cp data/*.defs data/*.h $SNAPCRAFT_STAGE/usr/share/cups/ppdc/
      # Compile sample.drv into PPD files
      $SNAPCRAFT_STAGE/usr/bin/ppdc -I $SNAPCRAFT_STAGE/usr/share/cups/ppdc -d ppd ppdc/sample.drv
      # Compress the compiled PPD files
      $SNAPCRAFT_STAGE/bin/pyppd -v -o cups-ppds ppd
      rm -rf ppd
      mkdir -p $SNAPCRAFT_STAGE/usr/share/ppd
      mv cups-ppds $SNAPCRAFT_STAGE/usr/share/ppd
      #snapcraftctl build
    build-packages:
      - patch
      - gettext
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - libavahi-client-dev
      - libavahi-common-dev
      - libavahi-compat-libdnssd-dev
      - libdbus-1-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libldap2-dev
      - libkrb5-dev
      - libpam0g-dev
      - libpaper-dev
      - libpng-dev
      - perl-base
    stage-packages:
      - libavahi-common3
      - libavahi-client3
      - libicu66
      - libjson-glib-1.0-0
      - libsoup2.4-1
      - libxml2
    prime:
      - -etc/fonts
      - lib/*/lib*.so*
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - usr/share/ppd/cups-ppds
      - usr/lib
      - usr/lib/libcups.so.2
      - usr/lib/libcupsimage.so.2
      - usr/lib/ghostscript-printer-app/filter/rastertoepson
      - usr/lib/ghostscript-printer-app/filter/rastertohp
      - usr/lib/ghostscript-printer-app/filter/rastertolabel
      - usr/lib/ghostscript-printer-app/backend/snmp
      - usr/lib/ghostscript-printer-app/backend/dnssd
      - usr/lib/ghostscript-printer-app/backend/socket
      - usr/lib/ghostscript-printer-app/backend/ipp
      - usr/lib/ghostscript-printer-app/backend/ipps
      - usr/lib/ghostscript-printer-app/backend/lpd
      - usr/lib/ghostscript-printer-app/backend/usb
      - usr/lib/ghostscript-printer-app/backend/org.cups.usb-quirks
      - usr/lib/ghostscript-printer-app/backend/snmp.conf
    after: [pyppd]

  cups-filters:
    source: https://github.com/OpenPrinting/cups-filters
    source-type: git
    plugin: autotools
    # We need the 3 libraries: libcupsfilters, libppd, and libfontembed,
    # foomatic-rip (for the Foomatic PPDs for the GHostscript drivers and
    # also for the PCL-XL PPDs from Ricoh and OEM) and the rastertoepson,
    # rastertopclx, and texttotext filters (for the included PPD files),
    # and also all PPD and *.drv files
    override-build: |
      set -eux
      ./autogen.sh
      ./configure --disable-avahi --disable-ldap --disable-foomatic --disable-braille --disable-mutool --without-rcdir --with-pdftops-path=/snap/ghostscript-printer-app/current/usr/bin/pdftops
      make libppd.la
      make libcupsfilters.la
      make libfontembed.la
      make foomatic-rip
      make rastertoescpx
      make rastertopclx
      mkdir -p $SNAPCRAFT_STAGE/usr/lib
      cp .libs/lib* $SNAPCRAFT_STAGE/usr/lib/
      mkdir -p ../install
      cp .libs/foomatic-rip ../install
      cp .libs/rastertoescpx ../install
      cp .libs/rastertopclx ../install
      mkdir -p $SNAPCRAFT_STAGE/usr/include/ppd
      cp ppd/*.h $SNAPCRAFT_STAGE/usr/include/ppd/
      mkdir -p $SNAPCRAFT_STAGE/usr/include/cupsfilters
      cp cupsfilters/*.h $SNAPCRAFT_STAGE/usr/include/cupsfilters/
      mkdir -p $SNAPCRAFT_STAGE/usr/include/fontembed
      cp fontembed/*.h $SNAPCRAFT_STAGE/usr/include/fontembed/
      mkdir -p $SNAPCRAFT_STAGE/usr/lib/pkgconfig
      cp *.pc $SNAPCRAFT_STAGE/usr/lib/pkgconfig/
      # Compile cupsfilters.drv into PPD files
      $SNAPCRAFT_STAGE/usr/bin/ppdc -I filter -I $SNAPCRAFT_STAGE/usr/share/cups/ppdc -d ppd drv/cupsfilters.drv
      # Remove PPD files which are not useful in the Printer Application
      rm ppd/test.ppd ppd/test2.ppd ppd/textonly.ppd
      # Compress the included PPD files, both ready-made and compiled
      cp ppdfiles/*.ppd ppd
      $SNAPCRAFT_STAGE/bin/pyppd -v -o cups-filters-ppds ppd
      rm -rf ppd
      mkdir -p $SNAPCRAFT_STAGE/usr/share/ppd
      mv cups-filters-ppds $SNAPCRAFT_STAGE/usr/share/ppd
      #snapcraftctl build
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - poppler-utils
      - libglib2.0-dev
      - liblcms2-dev
      - libpoppler-cpp-dev
      - libpng-dev
      - libjpeg-dev
      - libtiff5-dev
      - zlib1g-dev
      - libfontconfig1-dev
      - libdbus-1-dev
      - librsvg2-bin
    stage-packages:
      - poppler-utils
      - libpoppler-cpp0v5
      - libjbig0
      - liblcms2-2
      - libnspr4
      - libnss3
      - libopenjp2-7
      - libpoppler97
      - libtiff5
      - libwebp6
    organize:
      foomatic-rip: usr/lib/ghostscript-printer-app/filter/foomatic-rip
      rastertoescpx: usr/lib/ghostscript-printer-app/filter/rastertoescpx
      rastertopclx: usr/lib/ghostscript-printer-app/filter/rastertopclx
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - usr/share/ppd/cups-filters-ppds
      - usr/lib
      - usr/lib/libcupsfilters.so.1
      - -usr/lib/libcupsfilters.so.1.0.0
      - usr/lib/libppd.so.1
      - -usr/lib/libppd.so.1.0.0
      - usr/lib/libfontembed.so.1
      - -usr/lib/libfontembed.so.1.0.0
      - usr/bin/pdftops
      - usr/lib/ghostscript-printer-app
    after: [cups, qpdf, ghostscript, pyppd]

  pyppd:
    source: https://github.com/OpenPrinting/pyppd
    source-type: git
    plugin: python
    override-prime: ""

  foomatic-db:
    source: https://github.com/OpenPrinting/foomatic-db
    source-type: git
    plugin: nil
    override-build: |
      set -eux
      ./make_configure
      ./configure --disable-ppds-to-cups --disable-gzip-ppds --prefix=/usr --with-drivers=NOOBSOLETES,NOEMPTYCMDLINE
      make DESTDIR=`pwd`/../install install
      cd ../install
      # Remove all PostScript PPDs, these printers are supported by the
      # PostScript Printer Application
      rm usr/share/foomatic/db/source/PPD/*/*.ppd
      rm -rf usr/share/foomatic/db/source/PPD/Kyocera
      rm -rf usr/share/foomatic/db/source/PPD/Oce
      rm -rf usr/share/foomatic/db/source/PPD/*/PS
      # Remove executable bits on the files
      find usr/share/foomatic/db -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from the PPD file directories
      find usr/share/foomatic/db/source/PPD -type f \! -name '*.ppd' -print0 | xargs -0 rm || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find usr/share/foomatic/db/source/PPD -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Remove drivers which need external filters we cannot get hold on
      # Note that the "./configure; make install" process of foomatic-db
      # already removed driver entries marked obsolete and entries without
      # driver command line prototype.
      ( cd usr/share/foomatic/db/source/driver; \
        rm bjc800j.xml; \
        rm c2070.xml; \
        rm drv_x125.xml; \
        rm lm1100.xml; \
        rm lpstyl.xml; \
        rm ml85p.xml; \
        rm pbm2l2030.xml; \
        rm pbm2l7k.xml; \
        rm pbm2lwxl.xml; \
        rm pentaxpj.xml; \
      	rm ppmtomd.xml; \
      )
      # Pre-build all PPDs from the Foomatic XML data
      FOOMATICDB=usr/share/foomatic foomatic-compiledb -j 4 -t ppd -d ppd `ls -1 usr/share/foomatic/db/source/driver/*.xml | perl -p -e 's:^.*db/source/driver/(\S*)\.xml\s*$:\1\n:'`
      # Compress the Foomatic PPDs in a self-extracting archive
      $SNAPCRAFT_STAGE/bin/pyppd -v -o foomatic-ppds ppd
      rm -rf ppd
      # Compress the manufacturer PPDs in a self-extracting archive
      mv usr/share/foomatic/db/source/PPD ppd
      $SNAPCRAFT_STAGE/bin/pyppd -v -o manufacturer-ppds ppd
      #snapcraftctl build
    build-packages:
      - perl-base
      - python3
      - xz-utils
      - foomatic-db-engine
    stage-packages:
      - python3
      - xz-utils
    organize:
      foomatic-ppds: usr/share/ppd/foomatic-ppds
      manufacturer-ppds: usr/share/ppd/manufacturer-ppds
    stage:
      - usr/bin
      - usr/share/ppd
    prime:
      - -etc
      - usr/bin
      - usr/share/ppd
      - -usr/share/apport
      - -usr/share/bug
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/share/foomatic
      - -usr/share/pnm2ppa
      - -var
    after: [pyppd]

  hplip:
    # We need only the hpijs executable (for the Foomatic PPDs HPIJS is used
    # here for non-HP PCL 5c/e printers, works better than Ghostscript's
    # built-in drivers
    #
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.git
    source-type: git
    source-branch: debian/3.21.8+dfsg0-2
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.21.8/hplip-3.21.8.tar.gz
    plugin: autotools
    build-environment:
      - PYTHON: python3
      - LD_LIBRARY_PATH: $SNAPCRAFT_STAGE/usr/lib:$LD_LIBRARY_PATH
      - CUPS_DATADIR: $SNAPCRAFT_STAGE/usr/share/cups
      - on arm64:
        - BUILDARCH: aarch64-unknown-linux-gnu
      - else:
        - BUILDARCH: $SNAPCRAFT_ARCH_TRIPLET
    # Paremeter list here only needed for upstream source, but no need to
    # comment out for Debian source
    autotools-configure-parameters:
      - --build=$BUILDARCH
      - --prefix=/usr
      - --disable-foomatic-rip-hplip-install
      - --without-docdir
      - --without-htmldir
      - --without-hpppddir
      - --without-drvdir
      - --without-icondir
      - --disable-hpcups-install
      - --disable-cups-drv-install
      - --disable-cups-ppd-install
      - --enable-hpijs-install
      - --disable-foomatic-drv-install
      - --disable-foomatic-ppd-install
      - --enable-network-build
      - --disable-class-driver
      - --disable-scan-build
      - --disable-gui-build
      - --disable-fax-build
      - --disable-qt3
      - --disable-qt4
      - --disable-qt5
      - --disable-policykit
    # We need only the hpijs executable
    override-build: |
      set -eux
      # Correct hard-coded /etc/hp/ path in Makefile
      perl -p -i -e 's:/etc/hp:/snap/ghostscript-printer-app/current/etc/hp:' Makefile*
      # Do the "./configure" (for Debian source)
      sh debian/autogen.sh
      ./configure \
        --build=$BUILDARCH \
        --prefix=/usr \
        --disable-foomatic-rip-hplip-install \
        --without-docdir \
        --without-htmldir \
        --without-hpppddir \
        --without-drvdir \
        --without-icondir \
        --disable-hpcups-install \
        --disable-cups-drv-install \
        --disable-cups-ppd-install \
        --enable-hpijs-install \
        --disable-foomatic-drv-install \
        --disable-foomatic-ppd-install \
        --enable-network-build \
        --disable-class-driver \
        --disable-scan-build \
        --disable-gui-build \
        --disable-fax-build \
        --disable-qt3 \
        --disable-qt4 \
        --disable-qt5 \
        --disable-policykit
      # Following step needed because of the Debian patches (for Debian source)
      # Compress various files before building, they are needed for the build,
      # and were compressed in the non-repacked upstream tarballs
      find . -name '*.ppd' | xargs gzip -f
      find data/ -regextype posix-extended -regex '.*\.(ldl|pcl|ps|pdf)' | xargs gzip -f
      # Following step needed because of the Debian patches (for Debian source)
      # Rebuild the .drv.in files from drv.in.template
      python3 ./dat2drv.py
      # Correct hard-coded paths in C/C++ source code
      # The /etc/... and /usr/... paths in these files do not need to get
      # corrected, only the /var/... ones
      perl -p -i -e 's:\"/var/lib/hp:\"/var/snap/ghostscript-printer-app/common/var/:' common/utils.[ch]
      # Do the "./configure; make; make install" (for upstream source)
      # snapcraftctl build
      # Do the "make; make install" (for Debian source)
      make
      make DESTDIR=`pwd`/../install install
      # Correct hard-coded paths in hplip.conf
      ( cd ../install/snap/ghostscript-printer-app/current/etc/hp; \
        perl -p -i -e 's:/var/:/var/snap/ghostscript-printer-app/common/var/:' hplip.conf; \
        perl -p -i -e 's:/usr/share/:/snap/ghostscript-printer-app/current/usr/share/:' hplip.conf; \
        perl -p -i -e 's:/usr/share/ppd/hplip:/usr/share/ppd:' hplip.conf; \
        perl -p -i -e 's:/usr/share/ppd/HP:/usr/share/ppd:' hplip.conf; \
        perl -p -i -e 's:/usr/lib/cups/:/snap/ghostscript-printer-app/current/usr/lib/ghostscript-printer-app/:' hplip.conf; \
      )
    build-packages:
      - ubuntu-dev-tools
      - dpkg-dev
      - fakeroot
      - autoconf
      - automake
      - gawk
      - python3-dev
      - libpython3-dev
      - fdupes
      - libavahi-client-dev
      - libavahi-core-dev
      - libdbus-1-dev
      - libjpeg-dev
      - libsnmp-dev
      - libssl-dev
      - libtool
      - libudev-dev
      - libusb-1.0-0-dev
      - perl-base
      - python3
      - xz-utils
      - pyppd
    stage-packages:
      - libsnmp35
    organize:
      snap/ghostscript-printer-app/current/etc/hp/hplip.conf: etc/hp/hplip.conf
    prime:
      - lib/*/lib*.so*
      - -etc/udev*
      - etc/hp/hplip.conf
      - -var
      - usr/bin/hpijs
      - usr/lib/libhpip.so*
      - usr/lib/libhpmud.so*
      - usr/lib/libhpdiscovery.so*
      - usr/lib/*/lib*.so*
      - -usr/lib/python*
      - -usr/lib/systemd
      - -usr/lib/cups
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups]

  # Unmaintained printer drivers which come as a filter to convert generic
  # raster output of GhostScript into the printer's data format. The PPDs
  # for these drivers come as part of Foomatic, so we build and install
  # only the filters here.

  c2050:
    # Upstream source is not available any more, using Debian packaging
    # GIT instead
    source: https://salsa.debian.org/printing-team/c2050.git
    source-type: git
    source-branch: debian/0.3b-9
    plugin: make
    override-build: |
      set -eux
      # Avoid implicit declaration as "int"
      perl -p -i -e 's/register i\b/register int i/' c2050.c
      perl -p -i -e 's/^SweepBuffer_Init\b/void SweepBuffer_Init/' c2050.c
      # Increase size of buffer to avoind segfault (also passes valgrind then)
      perl -p -i -e 's/SweepBuffer_Init\s*\(\s*&blkbuffer,\s+blkbytesize\s*\)/SweepBuffer_Init(&blkbuffer, blkbytesize * 2)/' c2050.c
      make -j2
      mkdir -p $SNAPCRAFT_STAGE/usr/bin
      cp c2050 $SNAPCRAFT_STAGE/usr/bin
      #snapcraftctl build
    stage-packages:
      - libjbig0
      - libjpeg-turbo8
      - libpng16-16
      - libtiff5
      - libwebp6
    prime:
      - usr/bin/c2050
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
  cjet:
    # Upstream source is not available any more, using Debian packaging
    # GIT instead
    source: https://salsa.debian.org/printing-team/cjet.git
    source-type: git
    source-branch: debian/0.8.9-9
    plugin: make
    override-build: |
      set -eux
      make -j2
      mkdir -p $SNAPCRAFT_STAGE/usr/bin
      cp cjet $SNAPCRAFT_STAGE/usr/bin
      #snapcraftctl build
    prime:
      - usr/bin/cjet

  min12xxw:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage: http://www.hinterbergen.de/mala/min12xxw/
    source: https://salsa.debian.org/printing-team/min12xxw.git
    source-type: git
    source-branch: debian/0.0.9-11
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      # Refresh build system, because of the Debian patches
      autoreconf --install
      snapcraftctl build
    build-packages:
      - autoconf
    stage:
      - usr/bin/min12xxw
    prime:
      - usr/bin/min12xxw
      - -usr/share

  pnm2ppa:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage: http://pnm2ppa.sourceforge.net/
    source: https://salsa.debian.org/printing-team/pnm2ppa.git
    source-type: git
    source-branch: debian/1.13-12
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
      - --sysconfdir=/etc
    override-build: |
      set -eux
      # "Unlock" config file
      perl -p -i -e 's/^\s*version\s+0\s+/version 710 /' pnm2ppa.conf
      # Set config file path (we copy the config file to an editable place
      # on server startup)
      perl -p -i -e 's:(\s+)SYSCONFDIR "(/pnm2ppa\.):\1"/var/snap/ghostscript-printer-app/common/pnm2ppa\2:' pnm2ppa.h
      # Update config.guess/config.sub, pnm2ppa seems to be of pre-arm64 era
      cp /usr/share/misc/config.* .
      snapcraftctl build
    build-packages:
      - autotools-dev
    prime:
      - etc/pnm2ppa.conf
      - usr/bin/calibrate_ppa
      - usr/bin/pnm2ppa
      - -usr/share

  # Unmaintained printer drivers which come as complete package of either
  # CUPS filter(s) or filters to use together witrh Ghostscript and
  # foomatic-rip and of PPD files or PPD file generators (*.drv files for
  # /usr/share/cups/drv or executables for /usr/lib/cups/driver)

  c2esp:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage: https://sourceforge.net/projects/cupsdriverkodak/
    source: https://salsa.debian.org/printing-team/c2esp.git
    source-type: git
    source-branch: debian/27-11
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      autoreconf --install
      snapcraftctl build
      # Compile *.drv files into PPD files
      $SNAPCRAFT_STAGE/usr/bin/ppdc -I $SNAPCRAFT_STAGE/usr/share/cups/ppdc -d ppd */*.drv
      # Compress the compiled PPD files
      $SNAPCRAFT_STAGE/bin/pyppd -v -o c2esp-ppds ppd
      rm ppd/*.ppd
      mkdir -p $SNAPCRAFT_STAGE/usr/share/ppd
      mv c2esp-ppds $SNAPCRAFT_STAGE/usr/share/ppd
    build-packages:
      - autoconf
      - automake
    organize:
      usr/lib/cups/filter: usr/lib/ghostscript-printer-app/filter
    prime:
      - usr/lib/ghostscript-printer-app/filter/*
      - usr/share/ppd/c2esp-ppds
    after: [cups, pyppd]

  dymo-cups-drivers:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage:
    #https://www.dymo-label-printers.co.uk/news/download-dymo-sdk-for-linux.html
    source: https://salsa.debian.org/printing-team/dymo-cups-drivers.git
    source-type: git
    source-branch: debian/1.4.0-10
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      autoreconf --install
      snapcraftctl build
      # Compress the included PPD files
      $SNAPCRAFT_STAGE/bin/pyppd -v -o dymo-ppds ppd
      mkdir -p $SNAPCRAFT_STAGE/usr/share/ppd
      mv dymo-ppds $SNAPCRAFT_STAGE/usr/share/ppd
    build-packages:
      - autoconf
      - automake
    organize:
      usr/lib/cups/filter: usr/lib/ghostscript-printer-app/filter
    prime:
      - usr/lib/ghostscript-printer-app/filter/*
      - usr/share/ppd/dymo-ppds
      - -usr/share/cups
    after: [cups, pyppd]

  foo2zjs:
    # Upstream source is not available any more, using Debian packaging
    # GIT instead
    # We do support color profiles in the sub-directories of
    # /var/snap/ghostscript-printer-app/common/foo2zjs but we do not
    # support automatic loading of firmware files. For those printers the
    # HPLIP Printer Application (with plugin loaded in-app) should be used.
    source: https://salsa.debian.org/printing-team/foo2zjs.git
    source-type: git
    source-branch: debian/20200505dfsg0-2
    plugin: nil
    override-build: |
      set -eux
      cp printer-profile.in printer-profile
      # Adjust paths in Makefile
      cp Makefile Makefile.orig
      perl -p -i -e  's:\$\(PREFIX\)/share/foo2:/var/snap/ghostscript-printer-app/common/foo2zjs/foo2:' Makefile
      make all PREFIX=/snap/ghostscript-printer-app/current/usr CUPS_SERVERBIN=$SNAPCRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app CUPS_DEVEL=1 CUPS_GOODAPI=1
      cp Makefile.orig Makefile
      make install PREFIX=$SNAPCRAFT_PART_INSTALL/usr CUPS_SERVERBIN=$SNAPCRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app
      # Install missing files
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/bin/
      cp getweb $SNAPCRAFT_PART_INSTALL/usr/bin/
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter
      rm -f $SNAPCRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter/command2foo2lava-pjl
      cp command2foo2lava-pjl $SNAPCRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter
      # Adjust the paths to the auxiliary files
      perl -p -i -e  's:PREFIX=.*:PREFIX=/snap/ghostscript-printer-app/current/usr:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      perl -p -i -e  's:\$PREFIX/share/foo2:/var/snap/ghostscript-printer-app/common/foo2zjs/foo2:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      perl -p -i -e  's:/usr/share/":/var/snap/ghostscript-printer-app/common/foo2zjs/":' $SNAPCRAFT_PART_INSTALL/usr/bin/getweb
      perl -p -i -e  's:/usr/share/\$FOO:/var/snap/ghostscript-printer-app/common/foo2zjs/\$FOO:' $SNAPCRAFT_PART_INSTALL/usr/bin/printer-profile*
      # Use $TMPDIR for temporary directory
      perl -p -i -e  's:/tmp:\$TMPDIR:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Add "-dNOINTERPOLATE" to the Ghostscript command lines to make
      # Ghostscript rendering the pages significantly faster
      perl -p -i -e 's/dNOPAUSE/dNOPAUSE -dNOINTERPOLATE/g' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Set up the PPD file collection
      cp -r PPD ppd
      # Remove the PPDs of printers which need their firmware loaded whenever
      # they are turned on. User should use the HPLIP Printer Application
      # with them
      for model in `cat Makefile | grep install-usermap | cut -d j -f 2 | cut -d ' ' -f 1`; do
        rm ppd/HP-LaserJet_$model.ppd
      done
      # Compress the included PPD files
      $SNAPCRAFT_STAGE/bin/pyppd -v -o foo2zjs-ppds ppd
      rm -rf ppd
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share/ppd
      mv foo2zjs-ppds $SNAPCRAFT_PART_INSTALL/usr/share/ppd
    build-packages:
      - dc
    stage-packages:
      - psutils
      - bsdutils
      - dc
    stage:
      - usr/bin/*
      - usr/lib/ghostscript-printer-app/filter/command2foo2lava-pjl
      - usr/share/ppd/foo2zjs-ppds
      - usr/share/foo2*
    prime:
      - usr/bin/*
      - usr/lib/ghostscript-printer-app/filter/command2foo2lava-pjl
      - usr/share/ppd/foo2zjs-ppds
      - usr/share/foo2*
      - -usr/share/cups
      - -usr/share/doc
      - -usr/share/man
    after: [cups, pyppd]

  m2300w:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage: https://sourceforge.net/projects/m2300w/
    # There is a successor (native CUPS!) on
    # https://github.com/ondrej-zary/m2x00w-cups
    # but as it is a very invasive change we stay with m2300w for the
    # 2300w qnd 2400w printers. We have no printers for testing.
    # Color profiles in the appropriate sub-directories of
    # /var/snap/ghostscript-printer-app/common/m2300w are supported.
    source: https://salsa.debian.org/printing-team/m2300w.git
    source-type: git
    source-branch: debian/0.51-15
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      # Explicitly call "./configure; make; make install" as "make install"
      # uses "INSTROOT" instead of "DESTDIR" (and in core20 the "autotools"
      # plugin is hardwired to "DESTDIR")
      #snapcraftctl build
      autoreconf --install
      ./configure --prefix=/usr
      make -j2
      make INSTROOT=$SNAPCRAFT_PART_INSTALL install
      # Adjust the paths to the auxiliary files
      perl -p -i -e  's:PREFIX=.*:PREFIX=/snap/ghostscript-printer-app/current/usr:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      perl -p -i -e  's:SHARE=.*:SHARE=/var/snap/ghostscript-printer-app/common/m2300w:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Use $TMPDIR for temporary directory
      perl -p -i -e  's:/tmp:\$TMPDIR:' $SNAPCRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Remove unneeded old foomatic-rip file
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/m2300w/0.51/foomatic
      # Package the two PPDs and their second version counterpart.
      mkdir -p $SNAPCRAFT_PART_INSTALL/ppd
      for n in 2300 2400; do
        mv $SNAPCRAFT_PART_INSTALL/usr/share/cups/model/Minolta/magicolor_${n}W-m${n}w.ppd $SNAPCRAFT_PART_INSTALL/ppd/Minolta-magicolor_${n}W-m2300w.ppd
        # Create copies for "KONICA MINOLTA" manufacturer name
        perl -p -e 's/Minolta/KONICA MINOLTA/g' $SNAPCRAFT_PART_INSTALL/ppd/Minolta-magicolor_${n}W-m2300w.ppd > $SNAPCRAFT_PART_INSTALL/ppd/KONICA_MINOLTA-magicolor_${n}W-m2300w.ppd
        # Correct originals for "Minolta" manufacturer name
        perl -p -i -e 's/KONICA MINOLTA/Minolta/g' $SNAPCRAFT_PART_INSTALL/ppd/Minolta-magicolor_${n}W-m2300w.ppd
      done
      rm -rf $SNAPCRAFT_PART_INSTALL/usr/share/cups
      # Compress the PPD files
      ( cd $SNAPCRAFT_PART_INSTALL
        $SNAPCRAFT_STAGE/bin/pyppd -v -o m2300w-ppds ppd
        rm -rf ppd
        mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share/ppd
        mv m2300w-ppds $SNAPCRAFT_PART_INSTALL/usr/share/ppd
      )
    build-packages:
      - autoconf
      - automake
    stage-packages:
      - psutils
    stage:
      - usr/bin/*
      - usr/share/ppd/m2300w-ppds
      - usr/share/m2300w/*
    prime:
      - usr/bin/*
      - usr/share/ppd/m2300w-ppds
      - usr/share/m2300w/*
      - -usr/share/cups
      - -usr/share/doc
      - -usr/share/man
    after: [cups, pyppd]

  fxlinuxprint:
    # Upstream source is not available any more, using Debian packaging
    # GIT instead
    # Fuji Xerox probably stopped with this driver as this is a PDF driver
    # and nowadays PDF printers use driverless IPP. The driver seems to be
    # for the pre-driverless-IPP PDF printers.
    source: https://salsa.debian.org/printing-team/fxlinuxprint
    source-type: git
    source-branch: debian/1.1.0+ds-3
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      # Add list of the actually supported printer models to the single
      # included PPD file, so that user of the Printer Application gets
      # guided to this driver if he has an appropriate printer. List taken
      # from debian/control file. It seems that there is no other place
      # which tells about the supported models.
      patch -p0 < $SNAPCRAFT_STAGE/patches/fxlinuxprint-explicit-printer-models-in-ppd.patch
      patch -p0 < $SNAPCRAFT_STAGE/patches/fxlinuxprint-fix-ppd-loading-in-filter-and-buffer-overflow-warnings.patch
      autoreconf --install
      snapcraftctl build
      # Compress the included PPD file
      $SNAPCRAFT_STAGE/bin/pyppd -v -o fxlinuxprint-ppds .
      mkdir -p $SNAPCRAFT_STAGE/usr/share/ppd
      mv fxlinuxprint-ppds $SNAPCRAFT_STAGE/usr/share/ppd
    build-packages:
      - autoconf
      - automake
    organize:
      usr/lib/cups/filter: usr/lib/ghostscript-printer-app/filter
    prime:
      - usr/lib/ghostscript-printer-app/filter/*
      - usr/share/ppd/fxlinuxprint-ppds
    after: [cups, pyppd, patches]

  ghostscript-printer-app:
    plugin: make
    source: .
    make-parameters:
      - LDFLAGS="$LDFLAGS -ljpeg"
      - SNAP=1
    # To improve convenience for developers (and everyone who wants to
    # build from source), we do a "make clean" before "make" here,
    # because if we had done "make" off-Snap, directly in the source
    # tree and afterwards build the Snap with snapcraft, the build
    # sucks in our local binary of ghostscript-printer-app instead of
    # compiling its own one in the Snap harness with the appropriate
    # libraries, ending up with the Snap containing an executable
    # which does not work inside the Snap. The "make clean" removes
    # any accidentally grabbed binary.
    override-build: |
      set -eux
      make clean
      snapcraftctl build
    build-packages:
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0
      - libjbig0
      - liblcms2-2
      - libtiff5
      - libwebp6
    stage:
      - usr/bin/ghostscript-printer-app
      - -usr/lib/ghostscript-printer-app
      - usr/share/ghostscript-printer-app/testpage.ps
    prime:
      - -var
      - usr/bin/ghostscript-printer-app
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - -lib/systemd
      - -usr/share/man
      - usr/share/ghostscript-printer-app/testpage.ps
    after: [pappl-retrofit, pappl, cups-filters, foomatic-db]

  mdns-lookup:
    # Make resolution of ".local" host names (Zero-Conf/mDNS/DNS-SD)
    # working: Take the original nsswitch.conf file from the base
    # Snap and add "mdns4_minimal [NOTFOUND=return]" to its "hosts:" line
    # Also install corresponding mdns4_minimal plug-in
    # See: https://forum.snapcraft.io/t/no-mdns-support-in-snaps-should-core-have-a-modified-nsswitch-conf/
    plugin: nil
    stage-packages:
      - libnss-mdns
    override-prime: |
      set -eux
      sed -Ee 's/^\s*hosts:(\s+)files/hosts:\1files mdns4_minimal \[NOTFOUND=return\]/' /snap/core20/current/etc/nsswitch.conf > $SNAPCRAFT_STAGE/etc/nsswitch.conf
      snapcraftctl prime
    prime:
      - lib/$SNAPCRAFT_ARCH_TRIPLET/libnss_mdns4_minimal*
      - etc/nsswitch.conf

  scripts:
    plugin: dump
    source: snap/local/
    organize:
      run-ghostscript-printer-app*: scripts/
    prime:
      - scripts/
    after: [ghostscript-printer-app]
